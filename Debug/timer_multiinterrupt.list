
timer_multiinterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000091c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aa4  08000aac  00010aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000aa4  08000aa4  00010aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010aac  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010aac  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004498  00000000  00000000  00010adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a3b  00000000  00000000  00014f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000648  00000000  00000000  000159b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005d0  00000000  00000000  00015ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001db0  00000000  00000000  000165c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002008  00000000  00000000  00018378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001a380  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b10  00000000  00000000  0001a3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001bf0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a8c 	.word	0x08000a8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a8c 	.word	0x08000a8c

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b087      	sub	sp, #28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e076      	b.n	80003be <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002d0:	2201      	movs	r2, #1
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	fa02 f303 	lsl.w	r3, r2, r3
 80002d8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	4013      	ands	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002e4:	68fa      	ldr	r2, [r7, #12]
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d165      	bne.n	80003b8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	2103      	movs	r1, #3
 80002f6:	fa01 f303 	lsl.w	r3, r1, r3
 80002fa:	43db      	mvns	r3, r3
 80002fc:	401a      	ands	r2, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	791b      	ldrb	r3, [r3, #4]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d003      	beq.n	800032a <GPIO_Init+0x76>
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	791b      	ldrb	r3, [r3, #4]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d12e      	bne.n	8000388 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	2103      	movs	r1, #3
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	43db      	mvns	r3, r3
 800033a:	401a      	ands	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	795b      	ldrb	r3, [r3, #5]
 8000348:	4619      	mov	r1, r3
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	685a      	ldr	r2, [r3, #4]
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	b29b      	uxth	r3, r3
 8000360:	4619      	mov	r1, r3
 8000362:	2301      	movs	r3, #1
 8000364:	408b      	lsls	r3, r1
 8000366:	43db      	mvns	r3, r3
 8000368:	401a      	ands	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	683a      	ldr	r2, [r7, #0]
 8000374:	7992      	ldrb	r2, [r2, #6]
 8000376:	4611      	mov	r1, r2
 8000378:	697a      	ldr	r2, [r7, #20]
 800037a:	b292      	uxth	r2, r2
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	b292      	uxth	r2, r2
 8000382:	431a      	orrs	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	b29b      	uxth	r3, r3
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	2103      	movs	r1, #3
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	401a      	ands	r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68da      	ldr	r2, [r3, #12]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	79db      	ldrb	r3, [r3, #7]
 80003a8:	4619      	mov	r1, r3
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	3301      	adds	r3, #1
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	2b0f      	cmp	r3, #15
 80003c2:	d985      	bls.n	80002d0 <GPIO_Init+0x1c>
    }
  }
}
 80003c4:	bf00      	nop
 80003c6:	371c      	adds	r7, #28
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003dc:	2300      	movs	r3, #0
 80003de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	691a      	ldr	r2, [r3, #16]
 80003e4:	887b      	ldrh	r3, [r7, #2]
 80003e6:	4013      	ands	r3, r2
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003ec:	2301      	movs	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	e001      	b.n	80003f6 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003f2:	2300      	movs	r3, #0
 80003f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	887a      	ldrh	r2, [r7, #2]
 8000414:	831a      	strh	r2, [r3, #24]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	460b      	mov	r3, r1
 800042c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	887a      	ldrh	r2, [r7, #2]
 8000432:	835a      	strh	r2, [r3, #26]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	460b      	mov	r3, r1
 800044a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d006      	beq.n	8000460 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000452:	490a      	ldr	r1, [pc, #40]	; (800047c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4313      	orrs	r3, r2
 800045c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800045e:	e006      	b.n	800046e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000460:	4906      	ldr	r1, [pc, #24]	; (800047c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	43db      	mvns	r3, r3
 800046a:	4013      	ands	r3, r2
 800046c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800

08000480 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800048c:	78fb      	ldrb	r3, [r7, #3]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d006      	beq.n	80004a0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000492:	490a      	ldr	r1, [pc, #40]	; (80004bc <RCC_APB1PeriphClockCmd+0x3c>)
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <RCC_APB1PeriphClockCmd+0x3c>)
 8000496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800049e:	e006      	b.n	80004ae <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80004a0:	4906      	ldr	r1, [pc, #24]	; (80004bc <RCC_APB1PeriphClockCmd+0x3c>)
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <RCC_APB1PeriphClockCmd+0x3c>)
 80004a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	43db      	mvns	r3, r3
 80004aa:	4013      	ands	r3, r2
 80004ac:	640b      	str	r3, [r1, #64]	; 0x40
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800

080004c0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a29      	ldr	r2, [pc, #164]	; (800057c <TIM_TimeBaseInit+0xbc>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d013      	beq.n	8000504 <TIM_TimeBaseInit+0x44>
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a28      	ldr	r2, [pc, #160]	; (8000580 <TIM_TimeBaseInit+0xc0>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d00f      	beq.n	8000504 <TIM_TimeBaseInit+0x44>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ea:	d00b      	beq.n	8000504 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a25      	ldr	r2, [pc, #148]	; (8000584 <TIM_TimeBaseInit+0xc4>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d007      	beq.n	8000504 <TIM_TimeBaseInit+0x44>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a24      	ldr	r2, [pc, #144]	; (8000588 <TIM_TimeBaseInit+0xc8>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d003      	beq.n	8000504 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a23      	ldr	r2, [pc, #140]	; (800058c <TIM_TimeBaseInit+0xcc>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d108      	bne.n	8000516 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800050a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	885a      	ldrh	r2, [r3, #2]
 8000510:	89fb      	ldrh	r3, [r7, #14]
 8000512:	4313      	orrs	r3, r2
 8000514:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <TIM_TimeBaseInit+0xd0>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d00c      	beq.n	8000538 <TIM_TimeBaseInit+0x78>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <TIM_TimeBaseInit+0xd4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d008      	beq.n	8000538 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800052c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	891a      	ldrh	r2, [r3, #8]
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	4313      	orrs	r3, r2
 8000536:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	89fa      	ldrh	r2, [r7, #14]
 800053c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <TIM_TimeBaseInit+0xbc>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d003      	beq.n	800055e <TIM_TimeBaseInit+0x9e>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <TIM_TimeBaseInit+0xc0>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d104      	bne.n	8000568 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	7a9b      	ldrb	r3, [r3, #10]
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2201      	movs	r2, #1
 800056c:	829a      	strh	r2, [r3, #20]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40010000 	.word	0x40010000
 8000580:	40010400 	.word	0x40010400
 8000584:	40000400 	.word	0x40000400
 8000588:	40000800 	.word	0x40000800
 800058c:	40000c00 	.word	0x40000c00
 8000590:	40001000 	.word	0x40001000
 8000594:	40001400 	.word	0x40001400

08000598 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d008      	beq.n	80005bc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80005ba:	e007      	b.n	80005cc <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	f023 0301 	bic.w	r3, r3, #1
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	801a      	strh	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]
 80005e4:	4613      	mov	r3, r2
 80005e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005e8:	787b      	ldrb	r3, [r7, #1]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d008      	beq.n	8000600 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	899b      	ldrh	r3, [r3, #12]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	887b      	ldrh	r3, [r7, #2]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80005fe:	e009      	b.n	8000614 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	899b      	ldrh	r3, [r3, #12]
 8000604:	b29a      	uxth	r2, r3
 8000606:	887b      	ldrh	r3, [r7, #2]
 8000608:	43db      	mvns	r3, r3
 800060a:	b29b      	uxth	r3, r3
 800060c:	4013      	ands	r3, r2
 800060e:	b29a      	uxth	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	819a      	strh	r2, [r3, #12]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800062c:	887b      	ldrh	r3, [r7, #2]
 800062e:	43db      	mvns	r3, r3
 8000630:	b29a      	uxth	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	821a      	strh	r2, [r3, #16]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	889b      	ldrh	r3, [r3, #4]
 8000652:	b29b      	uxth	r3, r3
 8000654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000658:	b29a      	uxth	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	889b      	ldrh	r3, [r3, #4]
 8000662:	b29a      	uxth	r2, r3
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	4313      	orrs	r3, r2
 8000668:	b29a      	uxth	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	809a      	strh	r2, [r3, #4]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <gpioConfig>:
#include "stm32f4xx.h"
#include "stm32f4xx_tim.h"

void gpioConfig(){
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIOInitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
 8000682:	2101      	movs	r1, #1
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff fedb 	bl	8000440 <RCC_AHB1PeriphClockCmd>
	GPIOInitStructure.GPIO_Mode=GPIO_Mode_OUT;
 800068a:	2301      	movs	r3, #1
 800068c:	713b      	strb	r3, [r7, #4]
	GPIOInitStructure.GPIO_OType=GPIO_OType_PP;
 800068e:	2300      	movs	r3, #0
 8000690:	71bb      	strb	r3, [r7, #6]
	GPIOInitStructure.GPIO_Pin=GPIO_Pin_0| GPIO_Pin_2;
 8000692:	2305      	movs	r3, #5
 8000694:	603b      	str	r3, [r7, #0]
	GPIOInitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
	GPIOInitStructure.GPIO_Speed=GPIO_Speed_100MHz;
 800069a:	2303      	movs	r3, #3
 800069c:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB,&GPIOInitStructure);
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <gpioConfig+0x34>)
 80006a4:	f7ff fe06 	bl	80002b4 <GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020400 	.word	0x40020400

080006b4 <timerConfig>:
void timerConfig(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef	TIMERInitStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
 80006ba:	2101      	movs	r1, #1
 80006bc:	2002      	movs	r0, #2
 80006be:	f7ff fedf 	bl	8000480 <RCC_APB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
 80006c2:	2101      	movs	r1, #1
 80006c4:	2004      	movs	r0, #4
 80006c6:	f7ff fedb 	bl	8000480 <RCC_APB1PeriphClockCmd>

	//tim3
	TIMERInitStructure.TIM_ClockDivision=1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	81bb      	strh	r3, [r7, #12]
	TIMERInitStructure.TIM_CounterMode=TIM_CounterMode_Up;
 80006ce:	2300      	movs	r3, #0
 80006d0:	80fb      	strh	r3, [r7, #6]
	TIMERInitStructure.TIM_Period=5999;
 80006d2:	f241 736f 	movw	r3, #5999	; 0x176f
 80006d6:	60bb      	str	r3, [r7, #8]
	TIMERInitStructure.TIM_Prescaler=999;
 80006d8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80006dc:	80bb      	strh	r3, [r7, #4]
	TIMERInitStructure.TIM_RepetitionCounter=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM3,&TIMERInitStructure);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <timerConfig+0x84>)
 80006e8:	f7ff feea 	bl	80004c0 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM3,TIM_TRGOSource_Update);
 80006ec:	2120      	movs	r1, #32
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <timerConfig+0x84>)
 80006f0:	f7ff ffa7 	bl	8000642 <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM3,ENABLE);
 80006f4:	2101      	movs	r1, #1
 80006f6:	4810      	ldr	r0, [pc, #64]	; (8000738 <timerConfig+0x84>)
 80006f8:	f7ff ff4e 	bl	8000598 <TIM_Cmd>
	//tim4
	TIMERInitStructure.TIM_ClockDivision=1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	81bb      	strh	r3, [r7, #12]
	TIMERInitStructure.TIM_CounterMode=TIM_CounterMode_Up;
 8000700:	2300      	movs	r3, #0
 8000702:	80fb      	strh	r3, [r7, #6]
	TIMERInitStructure.TIM_Period=5999;
 8000704:	f241 736f 	movw	r3, #5999	; 0x176f
 8000708:	60bb      	str	r3, [r7, #8]
	TIMERInitStructure.TIM_Prescaler=3999;
 800070a:	f640 739f 	movw	r3, #3999	; 0xf9f
 800070e:	80bb      	strh	r3, [r7, #4]
	TIMERInitStructure.TIM_RepetitionCounter=0;
 8000710:	2300      	movs	r3, #0
 8000712:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM4,&TIMERInitStructure);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <timerConfig+0x88>)
 800071a:	f7ff fed1 	bl	80004c0 <TIM_TimeBaseInit>
	TIM_SelectOutputTrigger(TIM4,TIM_TRGOSource_Update);
 800071e:	2120      	movs	r1, #32
 8000720:	4806      	ldr	r0, [pc, #24]	; (800073c <timerConfig+0x88>)
 8000722:	f7ff ff8e 	bl	8000642 <TIM_SelectOutputTrigger>
	TIM_Cmd(TIM4,ENABLE);
 8000726:	2101      	movs	r1, #1
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <timerConfig+0x88>)
 800072a:	f7ff ff35 	bl	8000598 <TIM_Cmd>

}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40000400 	.word	0x40000400
 800073c:	40000800 	.word	0x40000800

08000740 <nvicConfig>:
void nvicConfig(){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef	NVICInitStructure;

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8000746:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800074a:	f7ff fd3d 	bl	80001c8 <NVIC_PriorityGroupConfig>
	// tim3
	NVICInitStructure.NVIC_IRQChannel=TIM3_IRQn;
 800074e:	231d      	movs	r3, #29
 8000750:	713b      	strb	r3, [r7, #4]
	NVICInitStructure.NVIC_IRQChannelCmd=ENABLE;
 8000752:	2301      	movs	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
	NVICInitStructure.NVIC_IRQChannelPreemptionPriority=0;
 8000756:	2300      	movs	r3, #0
 8000758:	717b      	strb	r3, [r7, #5]
	NVICInitStructure.NVIC_IRQChannelSubPriority=0;
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]
	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);
 800075e:	2201      	movs	r2, #1
 8000760:	2101      	movs	r1, #1
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <nvicConfig+0x5c>)
 8000764:	f7ff ff38 	bl	80005d8 <TIM_ITConfig>
	NVIC_Init(&NVICInitStructure);
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fd40 	bl	80001f0 <NVIC_Init>
	//tim4
	NVICInitStructure.NVIC_IRQChannel=TIM4_IRQn;
 8000770:	231e      	movs	r3, #30
 8000772:	713b      	strb	r3, [r7, #4]
	NVICInitStructure.NVIC_IRQChannelCmd=ENABLE;
 8000774:	2301      	movs	r3, #1
 8000776:	71fb      	strb	r3, [r7, #7]
	NVICInitStructure.NVIC_IRQChannelPreemptionPriority=1;
 8000778:	2301      	movs	r3, #1
 800077a:	717b      	strb	r3, [r7, #5]
	NVICInitStructure.NVIC_IRQChannelSubPriority=0;
 800077c:	2300      	movs	r3, #0
 800077e:	71bb      	strb	r3, [r7, #6]
	TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);
 8000780:	2201      	movs	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <nvicConfig+0x60>)
 8000786:	f7ff ff27 	bl	80005d8 <TIM_ITConfig>
	NVIC_Init(&NVICInitStructure);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd2f 	bl	80001f0 <NVIC_Init>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40000400 	.word	0x40000400
 80007a0:	40000800 	.word	0x40000800

080007a4 <toggleLed>:
void toggleLed(uint16_t pin){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	80fb      	strh	r3, [r7, #6]
	uint16_t readLed=GPIO_ReadInputDataBit(GPIOB,pin);
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	4619      	mov	r1, r3
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <toggleLed+0x3c>)
 80007b4:	f7ff fe0c 	bl	80003d0 <GPIO_ReadInputDataBit>
 80007b8:	4603      	mov	r3, r0
 80007ba:	81fb      	strh	r3, [r7, #14]
	if (readLed==(uint16_t)Bit_SET){
 80007bc:	89fb      	ldrh	r3, [r7, #14]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d105      	bne.n	80007ce <toggleLed+0x2a>
		GPIO_ResetBits(GPIOB,pin);
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <toggleLed+0x3c>)
 80007c8:	f7ff fe2b 	bl	8000422 <GPIO_ResetBits>
	}
	else{
		GPIO_SetBits(GPIOB,pin);
	}
}
 80007cc:	e004      	b.n	80007d8 <toggleLed+0x34>
		GPIO_SetBits(GPIOB,pin);
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <toggleLed+0x3c>)
 80007d4:	f7ff fe16 	bl	8000404 <GPIO_SetBits>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020400 	.word	0x40020400

080007e4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	toggleLed(GPIO_Pin_0);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff ffdb 	bl	80007a4 <toggleLed>
	TIM_ClearITPendingBit(TIM3,TIM_IT_Update);
 80007ee:	2101      	movs	r1, #1
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <TIM3_IRQHandler+0x18>)
 80007f2:	f7ff ff15 	bl	8000620 <TIM_ClearITPendingBit>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40000400 	.word	0x40000400

08000800 <TIM4_IRQHandler>:
void TIM4_IRQHandler(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	toggleLed(GPIO_Pin_2);
 8000804:	2004      	movs	r0, #4
 8000806:	f7ff ffcd 	bl	80007a4 <toggleLed>
	TIM_ClearITPendingBit(TIM4,TIM_IT_Update);
 800080a:	2101      	movs	r1, #1
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <TIM4_IRQHandler+0x18>)
 800080e:	f7ff ff07 	bl	8000620 <TIM_ClearITPendingBit>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40000800 	.word	0x40000800

0800081c <main>:

int main(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	gpioConfig();
 8000820:	f7ff ff2c 	bl	800067c <gpioConfig>
	timerConfig();
 8000824:	f7ff ff46 	bl	80006b4 <timerConfig>
	nvicConfig();
 8000828:	f7ff ff8a 	bl	8000740 <nvicConfig>


	while (1){
 800082c:	e7fe      	b.n	800082c <main+0x10>
	...

08000830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000868 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000834:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000836:	e003      	b.n	8000840 <LoopCopyDataInit>

08000838 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800083a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800083c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800083e:	3104      	adds	r1, #4

08000840 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000844:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000846:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000848:	d3f6      	bcc.n	8000838 <CopyDataInit>
  ldr  r2, =_sbss
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800084c:	e002      	b.n	8000854 <LoopFillZerobss>

0800084e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800084e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000850:	f842 3b04 	str.w	r3, [r2], #4

08000854 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000856:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000858:	d3f9      	bcc.n	800084e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800085a:	f000 f841 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085e:	f000 f8f1 	bl	8000a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff ffdb 	bl	800081c <main>
  bx  lr    
 8000866:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000868:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800086c:	08000aac 	.word	0x08000aac
  ldr  r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000874:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000878:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800087c:	2000001c 	.word	0x2000001c

08000880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC_IRQHandler>

08000882 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000894:	e7fe      	b.n	8000894 <HardFault_Handler+0x4>

08000896 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800089a:	e7fe      	b.n	800089a <MemManage_Handler+0x4>

0800089c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <BusFault_Handler+0x4>

080008a2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <SystemInit+0x60>)
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <SystemInit+0x60>)
 80008e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <SystemInit+0x64>)
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <SystemInit+0x64>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <SystemInit+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <SystemInit+0x64>)
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <SystemInit+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000914:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <SystemInit+0x64>)
 8000918:	4a0b      	ldr	r2, [pc, #44]	; (8000948 <SystemInit+0x68>)
 800091a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <SystemInit+0x64>)
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <SystemInit+0x64>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000926:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <SystemInit+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800092e:	f000 f80d 	bl	800094c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <SystemInit+0x60>)
 8000934:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000938:	609a      	str	r2, [r3, #8]
#endif
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	40023800 	.word	0x40023800
 8000948:	24003010 	.word	0x24003010

0800094c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800095a:	4a36      	ldr	r2, [pc, #216]	; (8000a34 <SetSysClock+0xe8>)
 800095c:	4b35      	ldr	r3, [pc, #212]	; (8000a34 <SetSysClock+0xe8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000964:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000966:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <SetSysClock+0xe8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3301      	adds	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d103      	bne.n	8000984 <SetSysClock+0x38>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000982:	d1f0      	bne.n	8000966 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <SetSysClock+0xe8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000990:	2301      	movs	r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	e001      	b.n	800099a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d142      	bne.n	8000a26 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009a0:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <SetSysClock+0xe8>)
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <SetSysClock+0xe8>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <SetSysClock+0xec>)
 80009ae:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <SetSysClock+0xec>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009b8:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <SetSysClock+0xe8>)
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <SetSysClock+0xe8>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009c0:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <SetSysClock+0xe8>)
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <SetSysClock+0xe8>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ca:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <SetSysClock+0xe8>)
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <SetSysClock+0xe8>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80009d6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <SetSysClock+0xe8>)
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <SetSysClock+0xf0>)
 80009dc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <SetSysClock+0xe8>)
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <SetSysClock+0xe8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009e8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009ea:	bf00      	nop
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <SetSysClock+0xe8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <SetSysClock+0xf4>)
 80009fa:	f240 7205 	movw	r2, #1797	; 0x705
 80009fe:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <SetSysClock+0xe8>)
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <SetSysClock+0xe8>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f023 0303 	bic.w	r3, r3, #3
 8000a0a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <SetSysClock+0xe8>)
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <SetSysClock+0xe8>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000a18:	bf00      	nop
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SetSysClock+0xe8>)
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	f003 030c 	and.w	r3, r3, #12
 8000a22:	2b08      	cmp	r3, #8
 8000a24:	d1f9      	bne.n	8000a1a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000
 8000a3c:	07405419 	.word	0x07405419
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <__libc_init_array>:
 8000a44:	b570      	push	{r4, r5, r6, lr}
 8000a46:	4e0d      	ldr	r6, [pc, #52]	; (8000a7c <__libc_init_array+0x38>)
 8000a48:	4c0d      	ldr	r4, [pc, #52]	; (8000a80 <__libc_init_array+0x3c>)
 8000a4a:	1ba4      	subs	r4, r4, r6
 8000a4c:	10a4      	asrs	r4, r4, #2
 8000a4e:	2500      	movs	r5, #0
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	d109      	bne.n	8000a68 <__libc_init_array+0x24>
 8000a54:	4e0b      	ldr	r6, [pc, #44]	; (8000a84 <__libc_init_array+0x40>)
 8000a56:	4c0c      	ldr	r4, [pc, #48]	; (8000a88 <__libc_init_array+0x44>)
 8000a58:	f000 f818 	bl	8000a8c <_init>
 8000a5c:	1ba4      	subs	r4, r4, r6
 8000a5e:	10a4      	asrs	r4, r4, #2
 8000a60:	2500      	movs	r5, #0
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d105      	bne.n	8000a72 <__libc_init_array+0x2e>
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a6c:	4798      	blx	r3
 8000a6e:	3501      	adds	r5, #1
 8000a70:	e7ee      	b.n	8000a50 <__libc_init_array+0xc>
 8000a72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a76:	4798      	blx	r3
 8000a78:	3501      	adds	r5, #1
 8000a7a:	e7f2      	b.n	8000a62 <__libc_init_array+0x1e>
 8000a7c:	08000aa4 	.word	0x08000aa4
 8000a80:	08000aa4 	.word	0x08000aa4
 8000a84:	08000aa4 	.word	0x08000aa4
 8000a88:	08000aa8 	.word	0x08000aa8

08000a8c <_init>:
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	bf00      	nop
 8000a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a92:	bc08      	pop	{r3}
 8000a94:	469e      	mov	lr, r3
 8000a96:	4770      	bx	lr

08000a98 <_fini>:
 8000a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9a:	bf00      	nop
 8000a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9e:	bc08      	pop	{r3}
 8000aa0:	469e      	mov	lr, r3
 8000aa2:	4770      	bx	lr
